// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// User represents a single human being.
model User {
  id            Int          @id @default(autoincrement())
  name          String?
  email         String?      @unique
  emailVerified DateTime?    @map("email_verified")
  image         String?
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")
  siteRole      UserSiteRole @default(USER)
  orgs          OrgUser[]

  @@map("users")
}

// UserSiteRole dictates permissions outside of all orgs. ADMIN allows
// a user to add themselves to any org.
enum UserSiteRole {
  USER
  ADMIN
}

// Account represents a foreign credential (for example a Google user account),
// which is used to authenticate a User.
model Account {
  id                 Int       @id @default(autoincrement())
  compoundId         String    @unique @map("compound_id")
  userId             Int       @map("user_id")
  providerType       String    @map("provider_type")
  providerId         String    @map("provider_id")
  providerAccountId  String    @map("provider_account_id")
  refreshToken       String?   @map("refresh_token")
  accessToken        String?   @map("access_token")
  accessTokenExpires DateTime? @map("access_token_expires")
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @updatedAt @map("updated_at")

  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")
  @@map("accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int      @map("user_id")
  expires      DateTime
  sessionToken String   @unique @map("session_token")
  accessToken  String   @unique @map("access_token")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@map("sessions")
}

// Org is the main unit of resource isolation in Sierra. Most objects should be
// owned by an Org, and users have access to the Org through the OrgUser
// relation.
model Org {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String

  projects  Project[]
  searchEndpoints SearchEndpoint[]
  users     OrgUser[]
  rulesets  Ruleset[]
}

// OrgUser represents membership in an organization.
model OrgUser {
  id        Int         @id @default(autoincrement())
  userId    Int
  orgId     Int
  role      UserOrgRole @default(USER)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  org  Org  @relation(fields: [orgId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@unique([userId, orgId])
}

// UserOrgRole dictates permissions of a user in a specific role.
enum UserOrgRole {
  USER
  ADMIN
}

// SearchEndpoint represents a remote datasource which can be queried.
model SearchEndpoint {
  id        Int          @id @default(autoincrement())
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  orgId     Int
  name      String
  type      SearchEndpointType
  info      Json

  org      Org       @relation(fields: [orgId], references: [id])
  projects Project[]
}

enum SearchEndpointType {
  ELASTICSEARCH
}

// A Project is a group of search phrases which are being optimized.
model Project {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  orgId      Int
  searchEndpointId Int
  name       String

  org            Org             @relation(fields: [orgId], references: [id])
  searchEndpoint       SearchEndpoint        @relation(fields: [searchEndpointId], references: [id])
  searchPhrases  SearchPhrase[]
  queryTemplates QueryTemplate[]
}

model SearchPhrase {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  projectId Int
  // This takes the form of { "judgements": [ [ document ID, rating ], ... ] }
  judgement Json
  project   Project  @relation(fields: [projectId], references: [id])
}

// A QueryTemplate is an immutable backend query that can be populated combined
// with a SearchPhrase to create a query which can be dispatched to a
// SearchEndpoint. Instead of modifying a QueryTemplate, a new one is created
// with a parentId equal to the original template. In this way, templates form
// a tree of edits.
model QueryTemplate {
  id          Int              @id @default(autoincrement())
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  projectId   Int
  parentId    Int?
  query       String
  knobs       Json
  // Note, the link to to a particular version, to maintain immutability.
  rulesets    RulesetVersion[]
  // Short tag describing this QueryTemplate. Compare to a git branch.
  tag         String
  // Longer description of the QueryTemplate. Compare to a git commit message.
  description String

  project  Project         @relation(fields: [projectId], references: [id])
  parent   QueryTemplate?  @relation(fields: [parentId], references: [id])
  children QueryTemplate[] @relation("QueryTemplateToQueryTemplate")
}

// A Ruleset stores information about a query rewriting ruleset.
model Ruleset {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orgId     Int
  name      String

  org            Org              @relation(fields: [orgId], references: [id])
  rulesetVersion RulesetVersion[]
}

// RulesetVersion tracks a single version of the query rewriting ruleset.
// Instead of changing the value of a RulesetVersion, a new one is created with
// a parentId equal to the original RulesetVersion. In this way, rulesets form
// a tree of edits.
model RulesetVersion {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rulesetId Int
  parentId  Int?
  value     Json

  ruleset        Ruleset          @relation(fields: [rulesetId], references: [id])
  parent         RulesetVersion?  @relation(fields: [parentId], references: [id])
  children       RulesetVersion[] @relation("RulesetVersionToRulesetVersion")
  queryTemplates QueryTemplate[]
}
