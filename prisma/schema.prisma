// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// User represents a single human being.
model User {
  id            Int          @id @default(autoincrement())
  name          String?
  email         String?      @unique
  emailVerified DateTime?    @map("email_verified")
  image         String?
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")
  siteRole      UserSiteRole @default(USER)
  orgs          OrgUser[]

  @@map("users")
}

// UserSiteRole dictates permissions outside of all orgs. ADMIN allows
// a user to add themselves to any org.
enum UserSiteRole {
  USER
  ADMIN
}

// Account represents a foreign credential (for example a Google user account),
// which is used to authenticate a User.
model Account {
  id                 Int       @id @default(autoincrement())
  compoundId         String    @unique @map("compound_id")
  userId             Int       @map("user_id")
  providerType       String    @map("provider_type")
  providerId         String    @map("provider_id")
  providerAccountId  String    @map("provider_account_id")
  refreshToken       String?   @map("refresh_token")
  accessToken        String?   @map("access_token")
  accessTokenExpires DateTime? @map("access_token_expires")
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @updatedAt @map("updated_at")

  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")
  @@map("accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int      @map("user_id")
  expires      DateTime
  sessionToken String   @unique @map("session_token")
  accessToken  String   @unique @map("access_token")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@map("sessions")
}

// Org is the main unit of resource isolation in Sierra. Most objects should be
// owned by an Org, and users have access to the Org through the OrgUser
// relation.
model Org {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String

  projects    Project[]
  datasources Datasource[]
  users       OrgUser[]
}

// OrgUser represents membership in an organization.
model OrgUser {
  id        Int         @id @default(autoincrement())
  userId    Int
  orgId     Int
  role      UserOrgRole @default(USER)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  org  Org  @relation(fields: [orgId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@unique([userId, orgId])
}

// UserOrgRole dictates permissions of a user in a specific role.
enum UserOrgRole {
  USER
  ADMIN
}

// Datasource represents a remote datasource which can be queried.
model Datasource {
  id        Int            @id @default(autoincrement())
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  orgId     Int
  name      String
  type      DatasourceType
  info      Json

  org    Org      @relation(fields: [orgId], references: [id])
  config Config[]
}

enum DatasourceType {
  ELASTICSEARCH
}

// A Project is a group of queries which are being optimized.
model Project {
  id             Int            @id @default(autoincrement())
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  datasourceType DatasourceType
  orgId          Int
  name           String

  org     Org      @relation(fields: [orgId], references: [id])
  queries Query[]
  configs Config[]
}

// A Config is a group of settings to apply to a Project. When settings are
// changed, a new Config is formed from the old one, so Configs form a tree.
model Config {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  name         String?
  description  String
  projectId    Int
  parentId     Int?
  datasourceId Int
  config       Json

  project    Project    @relation(fields: [projectId], references: [id])
  datasource Datasource @relation(fields: [datasourceId], references: [id])
  parent     Config?    @relation("TryChildren", fields: [parentId], references: [id])
  children   Config[]   @relation("TryChildren")
}

model Query {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  projectId  Int
  query      Json
  judgements Json

  project Project @relation(fields: [projectId], references: [id])
}
